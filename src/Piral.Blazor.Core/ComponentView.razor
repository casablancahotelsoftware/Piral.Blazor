@inject IComponentActivationService Activation
@implements IDisposable

@foreach (var active in Activation.Components)
{
    <div id="@active.ReferenceId">
        <div style="display: contents">
            <DynamicComponent Type="@active.Component" Parameters="@active.Args" />
        </div>
    </div>
}

@code {
private void ComponentChanged(object sender, EventArgs e)
{
    this.StateHasChanged();
}

public void Dispose()
{
    Activation.ComponentsChanged -= ComponentChanged;
}

protected override Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        Activation.ComponentsChanged += ComponentChanged;
    }

    return base.OnAfterRenderAsync(firstRender);
}
}
