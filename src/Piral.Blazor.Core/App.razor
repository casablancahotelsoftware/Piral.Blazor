@inject IComponentActivationService Activation
@implements IDisposable

<DynamicComponent Type="@Activation.Root" Parameters="@parameters" />

@code {
    private static readonly RenderFragment componentView = @<ComponentView />;

    private readonly Dictionary<string, object> parameters = new Dictionary<string, object>{
        { "ChildContent", componentView }
    };

    private void RootChanged(object sender, EventArgs e)
    {
        this.StateHasChanged();
    }
    
    public void Dispose()
    {
        Activation.RootChanged -= RootChanged;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Activation.RootChanged += RootChanged;
        }

        return base.OnAfterRenderAsync(firstRender);
    }
}