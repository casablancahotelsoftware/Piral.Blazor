const { join, resolve, basename } = require("path");
const { promisify } = require("util");
const {
  copyFileSync,
  existsSync,
  mkdirSync,
  readdirSync,
  statSync,
} = require("fs");
const { exec } = require("child_process");
const glob = require("glob");

const execAsync = promisify(exec);

// filled in by MSBuild
const targetFramework = "**MSBUILD_TargetFramework**";
const targetFrameworkAlt = "**MSBUILD_TargetFrameworkMoniker**";
const matchVersion = /\d+\.\d+\.\d+/;

// dependent on the NODE_ENV variable set by piral cli
const RELEASE = process.env.NODE_ENV === "production";
const configuration = RELEASE ? "Release" : "Debug";
const action = RELEASE ? "publish" : "build";
const wwwroot = RELEASE ? join("publish", "wwwroot") : "wwwroot";

const bbjson = "blazor.boot.json";
const pajson = "project.assets.json";
const pjson = "package.json";
const analyzer = "Piral.Blazor.Analyzer";
const setupfile = "setup.tsx";

const ignoredFromWwwrootStandalone = ["index.html"];
const ignoredFromWwwroot = [...ignoredFromWwwrootStandalone, "_framework"];

const piralPiletFolder = resolve(__dirname, "..");
const rootFolder = resolve(piralPiletFolder, "..", "..");
const blazorfolderName = basename(piralPiletFolder);
const blazorprojectfolder = resolve(rootFolder, blazorfolderName);
const binariesdir = resolve(
  blazorprojectfolder,
  "bin",
  configuration,
  targetFramework
);
const objectsDir = resolve(blazorprojectfolder, "obj");
const wwwRootDir = resolve(binariesdir, wwwroot);
const sourceDir = resolve(wwwRootDir, "_framework");
const projectAssets = require(resolve(objectsDir, pajson));

const project = require(resolve(piralPiletFolder, pjson));
let appdir = resolve(piralPiletFolder, "node_modules", project.piral.name);

if (!existsSync(appdir + "/app") && existsSync(appdir + "/dist")) {
  appdir = appdir + "/dist";
}

const appFrameworkDir = resolve(appdir, "app", "_framework");
const piletManifest = require(resolve(sourceDir, bbjson));

const definePathCode = `function computePath() {
  try {
    throw new Error();
  } catch (t) {
    const e = ('' + t.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);
    if (e) {
      return e[0].replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^\\/]+$/, '$1') + '/';
    }
  }
  return '/';
}
const path = computePath();
`;

/** Extracts the project name from a blazor project folder */
function getProjectName(projectFolder) {
  return new Promise((resolve, reject) => {
    glob(`${projectFolder}/*.csproj`, (err, matches) => {
      if (!!err || !matches || matches.length == 0)
        return reject(new Error(`Project file not found. Details: ${err}`));
      if (matches.length > 1)
        return reject(
          new Error(
            `Only one project file is allowed. You have: ${JSON.stringify(
              matches,
              null,
              2
            )}`
          )
        );
      return resolve(basename(matches[0]).replace(".csproj", ""));
    });
  });
}

function getPiralVersion() {
  try {
    const { version } = require(resolve(appdir, pjson)).piralCLI;

    if (!version) {
      throw new Error();
    }

    return version;
  } catch {
    try {
      return require("piral-cli/package.json").version;
    } catch {
      throw new Error(
        "The version of the `piral-cli` could not be determined."
      );
    }
  }
}

async function buildSolution() {
  console.log(`Running "${action}" on solution in ${configuration} mode...`);

  await execAsync(`dotnet ${action} --configuration ${configuration}`, {
    cwd: blazorprojectfolder,
    stdio: "inherit",
  });
}

function getAllKeys(manifest, type) {
  return Object.keys(manifest.resources[type] || {});
}

function getUniqueKeys(originalManifest, piletManifest, type) {
  const original = getAllKeys(originalManifest, type);
  const dedicated = getAllKeys(piletManifest, type);
  return dedicated.filter((m) => !original.includes(m));
}

function diffBlazorBootFiles(piletManifest, originalManifest) {
  if (!existsSync(appdir)) {
    throw new Error(
      `Cannot find the directory of "${project.piral.name}". Please re-install the dependencies.`
    );
  }

  return [
    getUniqueKeys(originalManifest, piletManifest, "assembly"),
    getUniqueKeys(originalManifest, piletManifest, "pdb"),
  ];
}

function createAllRefs(internaltargets, externalTargets) {
  const refs = new Set(); //Sets de-duplicate AND keep their insertion order

  const createExternalRefs = (fileName) => {
    //depth-first post-order traversal of the dependencies
    if (!fileName) return;
    const deps = externalTargets[fileName];
    if (!deps || deps.length === 0) return refs.add(fileName);
    deps.forEach(createExternalRefs);
    refs.add(fileName);
  };

  for ([fileName, deps] of Object.entries(internaltargets)) {
    deps.forEach(createExternalRefs);
    refs.add(fileName);
  }

  return [...refs];
}

function getNestedObject(nestedObj, pathArr) {
  return pathArr.reduce(
    (obj, key) => (obj && obj[key] !== "undefined" ? obj[key] : undefined),
    nestedObj
  );
}

function defineTargets(uniqueDependencies, projectAssets) {
  const isNotSharedDep = (x) => uniqueDependencies.includes(x);
  const stripVersion = (x) => x.split("/")[0];

  // Get all external dependencies
  const targets =
    getNestedObject(projectAssets, ["targets", targetFrameworkAlt]) ||
    getNestedObject(projectAssets, ["targets", targetFramework]);

  /**Looks up the dll name for a project id */
  const getDllName = (projectId) => {
    const target = Object.entries(targets).find(
      (t) => stripVersion(t[0]) === projectId
    );
    if (!target || !target[1]["compile"]) return undefined;
    return Object.keys(target[1].compile)[0]
      .split("/")
      .pop()
      .replace(".dll", "");
  };

  const getcsprojname = (x) => basename(x).slice(0, -7); // C:\\path\\to\\proj\\proj.csproj --> proj

  const filterDeps = (deps) =>
    deps.map(getDllName).filter((d) => !!d && isNotSharedDep(d));

  const externalTargets = Object.entries(targets)
    .map(([id, data]) => [getDllName(stripVersion(id)), data])
    .filter(([dllName, _]) => isNotSharedDep(dllName)) //filter out targets that are shared deps
    .map(([dllName, data]) => [
      dllName,
      filterDeps(Object.keys(data.dependencies || {})), //filter out dependencies that are shared deps
    ])
    .reduce((acc, [k, v]) => ({ [k]: v, ...acc }), {}); // key-value to object

  // Get internal project
  const projectName = getNestedObject(projectAssets, [
    "project",
    "restore",
    "projectName",
  ]);

  const projectDependencies = filterDeps(
    Object.keys(
      getNestedObject(projectAssets, [
        "project",
        "frameworks",
        targetFramework,
        "dependencies",
      ])
    )
  );

  const projectReferences = Object.keys(
    getNestedObject(projectAssets, [
      "project",
      "restore",
      "frameworks",
      targetFramework,
      "projectReferences",
    ])
  ).map(getcsprojname);

  const internalTargets = {
    [projectName]: [...projectDependencies, ...projectReferences], // depencency arr = deps + references
  };

  return [internalTargets, externalTargets];
}

/** Copies entire directories or files, creating the output location in the process  */
function copySync(items, from, to) {
  for (item of items) {
    const fromPath = resolve(from, item);
    const toPath = resolve(to, item);

    if (isDir(fromPath)) {
      copySync(readdirSync(fromPath), fromPath, toPath); //recursion
    } else {
      mkdirSync(to, { recursive: true });
      copyFileSync(fromPath, toPath);
    }
  }
}

/** Generates the source code line to register a blazor page */
function toPageRegistration(route) {
  return `app.registerPage("${toPath(
    route
  )}", app.fromBlazor("page-${route}"));`;
}

/** Generates the source code line to register a blazor extension */
function toExtensionRegistration(entry) {
  const fqn = entry[0];
  const ids = entry[1];
  return ids
    .map(
      (id) =>
        `app.registerExtension("${id}", app.fromBlazor("extension-${fqn}"));`
    )
    .join("\n");
}

/** Translate a Blazor route into path-to-regexp syntax */
function toPath(route) {
  return route.replace(/\{([\w?]*)([:*])?([^\/\{\}]*)\}/g, (...groups) =>
    groups[2] != "*" ? `:${groups[1]}` : "*"
  );
}

/** Check if a path is a directory */
function isDir(path) {
  return statSync(path).isDirectory();
}

function extractBlazorVersion(manifest) {
  return Object.keys(manifest.resources.runtime)
    .map((x) => x.match(/^dotnet\.(.*?)\.js/))
    .find((x) => x)[1];
}

/* 
More advanced version compare that can handle versions 
like '6.0.1.89w2uv5kng' vs '6.0.1.qyg28onfw5' -> converts to 6.0.1.0 and compares them number by number
but only compare the first 2 numbers, major and minor versions, ignore patch versions and so on
*/
function isVersionSame(oldVer, newVer) {
  // version looks like 6.0.3.h5gi5nwtz2
  const oldParts = oldVer.split(".");
  const newParts = newVer.split(".");
  const len = Math.min(4, Math.max(oldParts.length, newParts.length));

  for (let i = 0; i < Math.min(2, len); i++) {
    const a = newParts[i];
    const b = oldParts[i];

    if (a !== b) {
      return "incompatible";
    }
  }

  for (let i = 2; i < Math.min(4, len); i++) {
    const a = newParts[i];
    const b = oldParts[i];

    if (a !== b) {
      return "compatible";
    }
  }

  return "match";
}

function checkBlazorVersion(piletBlazorVersion, appshellBlazorVersion) {
  const versionMatch = isVersionSame(appshellBlazorVersion, piletBlazorVersion);

  if (versionMatch === "incompatible") {
    throw new Error(`The Blazor versions of your pilet and Piral Instance are incompatible:
   - Piral Instance Blazor version = ${appshellBlazorVersion}
   - Pilet Blazor version = ${piletBlazorVersion}`);
  } else if (versionMatch === "compatible") {
    console.warn(`The Blazor versions of your pilet and Piral Instance do not match, but seem to be compatible:
    - Piral Instance Blazor version = ${appshellBlazorVersion}
    - Pilet Blazor version = ${piletBlazorVersion}`);
  }
}

async function checkBlazorInstallation(piletBlazorVersion) {
  try {
    require.resolve("piral-blazor/package.json");
    require.resolve("blazor/package.json");
  } catch {
    console.warn(
      "The npm packages `blazor` and `piral-blazor` have not been not found. Installing them now..."
    );
    const piralVersion = getPiralVersion();
    const [npmBlazorVersion] = matchVersion.exec(piletBlazorVersion);
    const [blazorRelease] = npmBlazorVersion.split(".");
    const installCmd = `npm i blazor@^${blazorRelease} piral-blazor@${piralVersion}`;
    await execAsync(installCmd);
  }
}

function copyAll([dllFiles, pdbFiles], ignoredFiles, targetDir) {
  const wwwRootFiles = readdirSync(wwwRootDir);
  const staticFiles = wwwRootFiles.filter((x) => !ignoredFiles.includes(x));

  //File copy
  copySync(pdbFiles, sourceDir, targetDir);
  copySync(dllFiles, sourceDir, targetDir);
  copySync(staticFiles, wwwRootDir, targetDir);
}

/*
 *
 * ----------------------------------------------------------------------------------------------------------------------
 *
 */
module.exports = async function () {
  const targetDir = this.options.outDir;

  // Build
  try {
    if (!existsSync(sourceDir) || RELEASE) {
      await buildSolution(); //always build when files not found or in release
    }

    if (!existsSync(sourceDir)) {
      throw new Error();
    }
  } catch (err) {
    throw new Error(
      `Something went wrong with the Blazor build. 
      Make sure there is at least one Blazor project in your solution. ${err}`
    );
  }

  // Piral Blazor checks
  const bbpath = resolve(appFrameworkDir, bbjson);
  const blazorInAppshell = existsSync(bbpath);
  const piletBlazorVersion = extractBlazorVersion(piletManifest);
  const blazorFiles = [];

  if (blazorInAppshell) {
    console.log(
      "The app shell already integrates `piral-blazor` with `blazor`."
    );

    const appShellManifest = require(bbpath);
    const appshellBlazorVersion = extractBlazorVersion(appShellManifest);
    blazorFiles.push(...diffBlazorBootFiles(piletManifest, appShellManifest));

    checkBlazorVersion(piletBlazorVersion, appshellBlazorVersion);

    copyAll(blazorFiles, ignoredFromWwwroot, targetDir);
  } else {
    console.log(
      "The app shell does not contain `piral-blazor`. Using standalone mode."
    );

    await checkBlazorInstallation(piletBlazorVersion);

    const variant = RELEASE ? "release" : "debug";
    const originalManifest = require(`blazor/${variant}/wwwroot/_framework/${bbjson}`);
    blazorFiles.push(...diffBlazorBootFiles(piletManifest, originalManifest));

    copyAll(blazorFiles, ignoredFromWwwrootStandalone, targetDir);
  }

  const allImports = [];

  // Piral Blazor API

  if (!blazorInAppshell) {
    allImports.push(
      `import { defineBlazorReferences, fromBlazor, releaseBlazorReferences } from 'piral-blazor/convert';`
    );
  }

  const getPiralBlazorApiCode = `export function initPiralBlazorApi(app) {
    ${
      blazorInAppshell
        ? ""
        : `
          app.defineBlazorReferences = defineBlazorReferences;
          app.defineBlazorOptions = () => {};
          app.fromBlazor = fromBlazor;
          app.releaseBlazorReferences = releaseBlazorReferences;
      `
    }
  }`;

  // Refs
  const [dllFiles, pdbFiles] = blazorFiles;
  const uniqueDependencies = dllFiles.map((f) => f.replace(".dll", ""));
  const targets = defineTargets(uniqueDependencies, projectAssets);
  const refs = createAllRefs(...targets);
  const registerDependenciesCode = `export function registerDependencies(app) { 
    const references = [
      ${refs.map((ref) => `path + "${ref}.dll"`).join(",")}, 
      ${pdbFiles.map((pdb) => `path + "${pdb}"`).join(",")}
    ]; 
    app.defineBlazorReferences(references);
  }`;

  //Options
  const registerOptionsCode = `export function registerOptions(app) {
    app.defineBlazorOptions({ resourcePathRoot: path });
  }`;

  // Analyzer
  const projectName = await getProjectName(blazorprojectfolder);
  const command = `dotnet ${analyzer} --base-dir "${blazorprojectfolder}" --dll-name "${projectName}.dll" --target-framework "${targetFramework}" --configuration "${configuration}"`;
  // Setup file
  const setupFilePath = join(blazorprojectfolder, setupfile).replace(
    /\\/g,
    "/"
  );
  const setupFileExists = existsSync(setupFilePath);

  if (setupFileExists) {
    allImports.push(`import projectSetup from '${setupFilePath}';`);
  }

  const setupPiletCode = `export const setupPilet = ${
    setupFileExists ? "projectSetup" : "() => {}"
  }`;

  try {
    const { stdout, stderr } = await execAsync(command);
    if (stderr) throw new Error(stderr);

    const { routes, extensions } = JSON.parse(stdout.trim());

    return `
    ${allImports.join("\n")}

    ${definePathCode}
    
    ${getPiralBlazorApiCode}
    ${setupPiletCode}
    ${registerDependenciesCode}
    ${registerOptionsCode}

    export function registerPages(app) { 
      ${routes.map(toPageRegistration).join("\n")}
    }

    export function registerExtensions(app) {
      ${Object.entries(extensions).map(toExtensionRegistration).join("\n")} 
    }

    export const routes = ${JSON.stringify(routes)};

    export const paths = ${JSON.stringify(routes.map(toPath))};
    `;
  } catch (err) {
    console.error(err);
    return `
    ${allImports.join("\n")}

    ${definePathCode}
    
    ${getPiralBlazorApiCode}
    ${setupPiletCode}
    ${registerDependenciesCode}
    ${registerOptionsCode}

    export function registerPages(...args) {
      console.warn('${__filename}: \`registerPages\` was called, but no Blazor routes were found.');
    }

    export function registerExtensions(...args) {
      console.warn('${__filename}: \`registerExtensions\` was called, but no Blazor extensions were found.');
    }

    export const routes = [];

    export const paths = [];
    `;
  }
};
